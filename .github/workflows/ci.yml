name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  precommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install pre-commit
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip setuptools wheel
          pip install pre-commit
      - name: Run pre-commit (all files)
        run: |
          . .venv/bin/activate
          pre-commit run --all-files --show-diff-on-failure

  lint:
    runs-on: ubuntu-latest
    needs: precommit
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11' ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install tooling
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip setuptools wheel
          pip install ruff black
      - name: Ruff
        run: |
          . .venv/bin/activate
          ruff check src tests
      - name: Black (check)
        run: |
          . .venv/bin/activate
          black --check src tests

  test:
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      matrix:
        python-version: [ '3.9', '3.10', '3.11' ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Restore venv cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Compile and install dependencies (locked)
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip setuptools wheel pip-tools
          pip-compile --quiet --generate-hashes --output-file requirements.lock.txt requirements.in
          pip install --prefer-binary --require-hashes -r requirements.lock.txt
          pip install -e .
      - name: Run tests with coverage and junit
        run: |
          . .venv/bin/activate
          mkdir -p results/junit coverage
          pytest -q --cov=src --cov-report=xml:coverage/coverage.xml --junitxml=results/junit/test-results.xml
      - name: Upload test artifacts (junit & coverage)
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-py${{ matrix.python-version }}
          path: |
            results/junit/test-results.xml
            coverage/coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage/coverage.xml
          flags: unittests
          fail_ci_if_error: false

  smoke:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Restore venv cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.10-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-3.10-
      - name: Compile and install dependencies (locked)
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip setuptools wheel pip-tools
          pip-compile --quiet --generate-hashes --output-file requirements.lock.txt requirements.in
          pip install --prefer-binary --require-hashes -r requirements.lock.txt
          pip install -e .
      - name: Restore processed data cache
        uses: actions/cache@v4
        with:
          path: |
            data/processed
          key: processed-${{ runner.os }}-${{ hashFiles('data/sample/sample.csv') }}
      - name: Smoke preprocess
        run: |
          . .venv/bin/activate
          python scripts/preprocess.py --input data/sample/sample.csv --output data/processed/dataset.csv
      - name: Cache processed data (post-preprocess)
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            data/processed
          key: processed-${{ runner.os }}-${{ hashFiles('data/sample/sample.csv') }}
      - name: Smoke train SVM
        env:
          DISABLE_GRID: "1"
        run: |
          . .venv/bin/activate
          python -m suicide_detection.training.train --model svm --data_path data/processed/dataset.csv --output_dir results/model_outputs/svm_ci
      - name: Cache model outputs
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            results/model_outputs
          key: model-outputs-${{ runner.os }}-${{ github.sha }}
      - name: Provision dataset agreement proofs
        run: |
          . .venv/bin/activate
          mkdir -p ethics/irb_documentation
          : > ethics/irb_documentation/clpsych_access_granted.txt
          : > ethics/irb_documentation/umd_access_granted.txt
      - name: Generate report
        run: |
          . .venv/bin/activate
          python scripts/generate_report.py
      - name: Upload smoke artifacts (report, plots, models)
        uses: actions/upload-artifact@v4
        with:
          name: results-artifacts
          path: |
            results/final_report.html
            results/**/*.png
            results/model_outputs/**/*.json
            results/model_outputs/**/*.pkl
            data/processed/dataset.csv
            requirements.lock.txt
